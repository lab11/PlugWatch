kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: grafana-pv-claim
  labels:
    app: grafana
spec:
  storageClassName: fast
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
    spec:
      initContainers:
        - name: volume-mount-hack
          image: busybox
          command: ["sh", "-c", "chown -R 472:472 /var/lib/grafana"]
          envFrom:
            - secretRef:
                name: grafana-config
          volumeMounts:
          - name: grafanadb
            mountPath: /var/lib/grafana

      containers:
        - name: grafana
          image: grafana/grafana:5.3.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /login
              port: 3000
          envFrom:
            - secretRef:
                name: grafana-config
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafanadb

            - mountPath: /etc/grafana/provisioning
              name: grafana-provisioning

            - mountPath: /etc/grafana/dashboards
              name: grafana-dashboards
      volumes:
        - name: grafanadb
          persistentVolumeClaim:
            claimName: grafana-pv-claim

        - name: grafana-provisioning
          configMap:
            name: grafana-provisioning
            items:
            - key: datasource.yaml
              path: datasources/datasource.yaml

            - key: dashboard.yaml
              path: dashboards/dashboard.yaml

        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
            items:
            - key: Powerwatch_General.json
              path: Powerwatch_General.json
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  type: NodePort
  ports:
   - port: 80
     targetPort: 3000
  selector:
   app: grafana
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: grafana
  annotations:
    kubernetes.io/ingress.global-static-ip-name: ${GRAFANA_IP_ADDRESS}
    kubernetes.io/ingress.allow-http: "false"
spec:
  backend:
    serviceName: grafana
    servicePort: 80
  tls:
  - secretName: grafana-tls
